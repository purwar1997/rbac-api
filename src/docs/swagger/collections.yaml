openapi: 3.0.0

info:
  title: RBAC
  description: The API collection for a Role-based access control system
  version: 1.0.0

servers:
  - url: http://localhost:4000/api
    description: RBAC Development Server
  - url: http://api.rbac.shubhampurwar.in/api
    description: RBAC Production Server

tags:
  - name: Authentication
    description: Authentication API
  - name: Users
    description: Users API
  - name: Roles
    description: Roles API

paths:
  /auth/signup:
    post:
      tags:
        - Authentication
      description: Allows users to create an account
      operationId: signup
      requestBody:
        description: A JSON object containing signup info
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        '201':
          description: A JSON object containing a newly created user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

  /auth/login:
    post:
      tags:
        - Authentication
      description: Allows users to login using their email address and password
      operationId: login
      requestBody:
        description: A JSON object containing login info
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /auth/logout:
    post:
      tags:
        - Authentication
      description: Allows authenticated users to log out
      operationId: logout
      responses:
        '200':
          description: Logout success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /auth/password/forgot:
    post:
      tags:
        - Authentication
      description: Sends an email to the user with reset password link
      operationId: forgotPassword
      requestBody:
        description: A JSON object containing an email address
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /auth/password/reset/{token}:
    put:
      tags:
        - Authentication
      description: Allows users to reset their account password
      operationId: resetPassword
      parameters:
        - in: path
          name: token
          required: true
          description: Reset password token
          schema:
            type: string
      requestBody:
        description: A JSON object containing new and confirmed passwords
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        '200':
          description: Password reset success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /users/self:
    get:
      tags:
        - Users
      description: Allows authenticated users to retrieve their profile
      operationId: getUserProfile
      responses:
        '200':
          description: A JSON object containing user's profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/UserWithRole'

    put:
      tags:
        - Users
      description: Allows authenticated users to update their profile
      operationId: updateUserProfile
      requestBody:
        description: A JSON object containing profile updates
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
                phone:
                  type: string
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        '200':
          description: A JSON object containing an updated profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/UserWithRole'

    delete:
      tags:
        - Users
      description: Allows authenticated users to delete their account
      operationId: deleteAccount
      responses:
        '200':
          description: Account deletion success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /users/self/avatar:
    post:
      tags:
        - Users
      description: Allows authenticated users to add their profile photo
      operationId: addProfilePhoto
      requestBody:
        description: Payload containing an image in binary encoded format
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
              required:
                - avatar
            encoding:
              avatar:
                content-type: image/*
      responses:
        '200':
          description: A JSON object containing an updated user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

    put:
      tags:
        - Users
      description: Allows authenticated users to remove their profile photo
      operationId: removeProfilePhoto
      responses:
        '200':
          description: A JSON object containing an updated user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

  /users/self/avatar/update:
    post:
      tags:
        - Users
      description: Allows authenticated users to update their profile photo
      operationId: updateProfilePhoto
      requestBody:
        description: Payload containing an image in binary encoded format
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
              required:
                - avatar
            encoding:
              avatar:
                content-type: image/*
      responses:
        '200':
          description: A JSON object containing an updated user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

  /users:
    get:
      tags:
        - Users
      description: Allows authenticated users to retrieve a list of other users
      operationId: getUsers
      responses:
        '200':
          description: A JSON object containing a list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        fullname:
                          type: string
                        email:
                          type: string
                        phone:
                          type: string
                        isActive:
                          type: boolean
                        role:
                          $ref: '#/components/schemas/Role'

  /users/{userId}:
    get:
      tags:
        - Users
      description: Allows authorized users to retrieve a user by ID
      operationId: getUserById
      parameters:
        - in: path
          name: userId
          description: ID of the user to be retrieved
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/UserWithRole'

    delete:
      tags:
        - Users
      description: Allows authorized users to delete another user
      operationId: deleteUser
      parameters:
        - in: path
          name: userId
          description: ID of the user that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing ID of the deleted user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: string

  /users/{userId}/role/assign:
    put:
      tags:
        - Users
      description: Allows authorized users to assign a role to another user
      operationId: assignRoleToUser
      parameters:
        - in: path
          name: userId
          description: ID of the user that needs to be assigned a role
          required: true
          schema:
            type: string
      requestBody:
        description: A JSON object containing ID of the role that needs to be assigned
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
      responses:
        '200':
          description: A JSON object containing an updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/UserWithRole'

  /users/{userId}/role/unassign:
    put:
      tags:
        - Users
      description: Allows authorized users to unassign a role from another user
      operationId: unassignRoleFromUser
      parameters:
        - in: path
          name: userId
          description: ID of the user whose role needs to be unassigned
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing an updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

  /users/{userId}/activate:
    put:
      tags:
        - Users
      description: Allows authorized users to activate another user
      operationId: activateUser
      parameters:
        - in: path
          name: userId
          description: ID of the user that needs to be activated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing an active user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

  /users/{userId}/deactivate:
    put:
      tags:
        - Users
      description: Allows authorized users to deactivate another user
      operationId: deactivateUser
      parameters:
        - in: path
          name: userId
          description: ID of the user that needs to be deactivated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing an inactive user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

  /users/{userId}/archive:
    put:
      tags:
        - Users
      description: Allows authorized users to archive another user
      operationId: archiveUser
      parameters:
        - in: path
          name: userId
          description: ID of the user that needs to be archived
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing an archived user
          content:
            application/json:
              schema:
                type: object
                properties:
                  succces:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

  /users/{userId}/restore:
    put:
      tags:
        - Users
      description: Allows authorized users to restore an archived user
      operationId: restoreArchivedUser
      parameters:
        - in: path
          name: userId
          description: ID of the archived user that needs to be restored
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing a restored user
          content:
            application/json:
              schema:
                type: object
                properties:
                  succces:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

  /roles:
    get:
      tags:
        - Roles
      description: Allows authenticated users to retrieve a list of all roles
      operationId: getAllRoles
      responses:
        '200':
          description: A JSON object containing a list of roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        userCount:
                          type: integer
                          format: int32
                        createdAt:
                          type: string
                          format: date-time

    post:
      tags:
        - Roles
      description: Allows authorized users to add a new role
      operationId: addNewRole
      requestBody:
        description: A JSON object containing role info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleBody'
      responses:
        '201':
          description: A JSON object containing a new role
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Role'

  /roles/{roleId}:
    get:
      tags:
        - Roles
      description: Allows authorized users to retrieve a role by ID
      operationId: getRoleById
      parameters:
        - in: path
          name: roleId
          description: ID of the role to be retrieved
          operationId: getRoleById
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing a role
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Role'

    put:
      tags:
        - Roles
      description: Allows authorized users to update an existing role
      operationId: editRole
      parameters:
        - in: path
          name: roleId
          description: ID of the role to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: A JSON object containing role updates
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleBody'
      responses:
        '200':
          description: A JSON object containing an updated role
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Role'

components:
  schemas:
    Success:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        fullname:
          type: string
        email:
          type: string
        phone:
          type: string
        role:
          type: string
        avatar:
          type: object
          properties:
            url:
              type: string
            publicId:
              type: string
        isActive:
          type: boolean
        isArchived:
          type: boolean
        resetPasswordToken:
          type: string
        resetPasswordExpiry:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserWithRole:
      type: object
      properties:
        id:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        fullname:
          type: string
        email:
          type: string
        phone:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        avatar:
          type: object
          properties:
            url:
              type: string
            publicId:
              type: string
        isActive:
          type: boolean
        isArchived:
          type: boolean
        resetPasswordToken:
          type: string
        resetPasswordExpiry:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Role:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        permissions:
          $ref: '#/components/schemas/RolePermissions'
        userCount:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    RoleBody:
      type: object
      properties:
        title:
          type: string
        permissions:
          $ref: '#/components/schemas/RolePermissions'

    RolePermissions:
      type: array
      items:
        type: string
        enum:
          - view_user
          - activate_user
          - deactivate_user
          - archive_user
          - restore_user
          - delete_user
          - view_role
          - add_role
          - edit_role
          - delete_role
          - assign_role
          - unassign_role
